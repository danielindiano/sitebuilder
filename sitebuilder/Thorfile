require 'digest/sha1'
require 'active_support/core_ext/string'

module Meumobi
  class Segment < Thor
    include Thor::Actions

    SegmentTemplate = <<-TEMPLATE
<?php

Config::write('Segment', array(
  'id' => '%{name}',
  'title' => '%{title}',
  'items' => array('%{item_types}'),
  'extensions' => array('%{extensions}'),
  'root' => '%{root}',
  'email' => array('%{email}' => '%{title}'),
  'hideCategories' => %{hide_categories},
  'enableSignup' => %{enable_signup},
  'fullOptions' => %{full_options},
  'analytics' => '%{analytics}',
));
    TEMPLATE

    SegmentColorsTemplate = <<-TEMPLATE
$background-color: %{background_color};
$main-color: %{main_color};
$button-base-color: %{main_color};
    TEMPLATE

    desc "create SEGMENT_NAME", "creates a new segment"
    def create(name=nil)
      options = { name: name }
      options[:title] = ask "title:"
      options[:email] = ask "email:"
      options[:user_first] = ask "user's first name:"
      options[:user_last] = ask "user's last name:"
      options[:user_email] = ask "user's email:"
      options[:user_password] = ask "user's password:"
      options[:root] = ask "root category title:"
      options[:background_color] = ask "background color, use #fff or #efefef:"
      options[:main_color] = ask "main color, use a darker color:"
      options[:hide_categories] = yes?("hide categories? (y/n)").to_s
      options[:enable_signup] = yes?("enable signup? (y/n)").to_s
      options[:full_options] = yes?("advanced category options? (y/n)").to_s
      options[:item_types] = ask "item types (separated by spaces):"
      options[:extensions] = ask "extensions (separated by spaces):"
      options[:item_types] = options[:item_types].split(" ").join("', '")
      options[:extensions] = options[:extensions].split(" ").join("', '")
      options[:analytics] = ask "Google Analytics ID, leave empty to disable analytics:"

      directory "sitebuilder/segment", "segments/#{name}/public"
      empty_directory "segments/#{name}/public"
      empty_directory "segments/#{name}/public/scripts"

      [:images, :styles, :scripts].each do |dir|
        create_link "segments/#{name}/public/#{dir}/shared", "../../../../sitebuilder/assets/#{dir}"
      end

      create_link "segments/#{name}/public/uploads", "../../../uploads"

      create_file "segments/#{name}/strings.yaml"
      create_file "segments/#{name}/config.php", SegmentTemplate % options

      create_file "segments/#{name}/public/styles/_colors.scss", SegmentColorsTemplate % options

      run "php #{self.class.source_root}/sitebuilder/script/create_user.php '#{options[:user_first]}' '#{options[:user_last]}' '#{options[:user_email]}' '#{options[:user_password]}' '#{options[:title]}' '#{options[:name]}'"
      run "sass -I #{self.class.source_root}/segments/#{name}/public/styles/ --update #{self.class.source_root}/sitebuilder/assets/styles/segment.scss:#{self.class.source_root}/segments/#{name}/public/styles/segment.css --no-cache"
      say "Your email is: #{options[:user_email]}"
      say "Your password is: #{options[:user_password]}"
    end

    def self.source_root
      File.dirname(__FILE__)
    end

  end

  class Item < Thor
    include Thor::Actions

    ItemTemplate = <<-TEMPLATE
<?php

namespace app\\models\\items;

require_once 'lib/geocoding/GoogleGeocoding.php';
use GoogleGeocoding;

use app\\models\\Items;

class %{type} extends Items
{
    protected $type = '%{type}';

    protected $fields = array(
      %{fields}
    );

    public static function __init()
    {
        parent::__init();

        $self = static::_object();
        $parent = parent::_object();

        $self->_schema = $parent->_schema + array(
          %{schema}
        );
    }
}

%{type}::applyFilter('save', function($self, $params, $chain) {
    return Items::addTimestamps($self, $params, $chain);
});

%{type}::applyFilter('save', function($self, $params, $chain) {
    return Items::addGeocode($self, $params, $chain);
});

%{type}::finder('nearest', function($self, $params, $chain) {
    return Items::nearestFinder($self, $params, $chain);
});

%{type}::finder('within', function($self, $params, $chain) {
    return Items::withinFinder($self, $params, $chain);
});
    TEMPLATE

    FieldTemplate = <<-TEMPLATE
        '%{name}' => array(
            'title' => '%{title}',
            'type' => '%{type}'
        ),
    TEMPLATE

    SchemaTemplate = "'%s' => array('type' => '%s', 'default' => %s),"

    desc "create TYPENAME FIELD:TYPE...", "creates a new type"
    def create(typename, *args)
      fields = args.map { |i|
        name, type = i.split ":"
        { name: name, title: name.humanize, type: type }
      }

      schemas = fields.each_with_object([]) do |field, schema|
        unless ['string', 'richtext', 'boolean', 'geo', 'datetime'].include? field[:type]
          raise ArgumentError, "Invalid type #{field[:type]}"
        end

        if field[:type] == 'geo'
          schema << [:geo, :array, 0]
          field[:type] = 'string'
        end

        schema << [field[:name], field[:type], "''"]
      end

      options = { type: typename.camelize }
      options[:fields] = fields.map { |f| FieldTemplate % f }.join "\n"
      options[:schema] = schemas.map { |s| SchemaTemplate % s }.join "\n"

      if yes?("use namespace? (y/n)")
        namespace = ask "namespace:"
        typename = options[:type] = namespace.humanize + typename.humanize
        path = "app/models/items/#{typename.camelize}.php"
      else
        path = "sitebuilder/app/models/items/#{typename.camelize}.php"
      end

      create_file path, ItemTemplate % options
      say "Don't forget to enable this item type in a segment!"

    end
  end

  class Extension < Thor
    include Thor::Actions

    ExtensionTemplate = <<-TEMPLATE
<?php

namespace app\\models\\extensions;

use app\\models\\Extensions;

class %{type} extends Extensions
{
  protected $specification = array(
    'title' => '%{type}',
    'description' => '',
    'type' => '%{type}',
    'allowed-items' => array('articles'),
  );

  protected $fields = array(
    // put fields here
    // 'url' => array(
    //   'title' => 'Feed URL',
    //   'type' => 'string'
    // ),
  );

  public static function __init()
  {
    parent::__init();
    $self = static::_object();
    $parent = parent::_object();

    $self->_schema = $parent->_schema + array(
      // put fields here
      // 'url' => array('type' => 'string', 'default' => ''),
    );
  }
}

%{type}::applyFilter('save', function($self, $params, $chain) {
  return StoreLocator::addTimestampsAndType($self, $params, $chain);
});
    TEMPLATE

    desc "create TYPENAME", "creates a new extension"
    def create(typename)
      path = "sitebuilder/app/models/extensions/#{typename.camelize}.php"
      options = { type: typename.camelize }

      create_file path, ExtensionTemplate % options
    end
  end
end
